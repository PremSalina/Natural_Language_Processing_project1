# -*- coding: utf-8 -*-
"""newlstm

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ll3KckWeW3EGEM4YbHoJor3GiSABTaTW
"""

class LSTM(nn.Module):
    def __init__(
        self,
        vocab_size,
        embedding_dim,
        hidden_dim,
        output_dim,
        n_layers,
        bidirectional,
        dropout_rate,
        pad_index,
    ):

        super().__init__()
        # Q1: Fill this code snippet correctly
        # Hint: You need to call Embedding from torch.nn and pass vocabulary size, the embedding dimension and padding index
        self.embedding = nn.Embedding(vocab_size, embedding_dim, padding_idx=pad_index)#your code here


        # Q2: Fill this code snippet correctly
        # Hint Pass the embedding dim, hidden dim, n layers, bidirection flag, dropout, set batch_first as True
        self.lstm = nn.LSTM(
            # your code here
            embedding_dim,
            hidden_dim,
            num_layers=n_layers,
            bidirectional=bidirectional,
            dropout=dropout_rate,
            batch_first=True,
        )

        # Q3: Fill this code snippet correctly
        # Hint: Call the Linear function from Torch.nn where, if bidirectional its is 2*hidden_dim else hidden_dim
        self.fc = nn.Linear(2 * hidden_dim if bidirectional else hidden_dim, output_dim)# your code here
        self.dropout = nn.Dropout(dropout_rate)

    def forward(self, ids, length):


        # Q4: Fill this code snippet correctly
        # ids = [batch size, seq len]
        # length = [batch size]
        embedded = self.dropout(self.embedding(ids))
        # embedded = [batch size, seq len, embedding dim]
        # Hint: Use pack_padded_sequence from torch.nn.utils.rnn and pass  embedded, length, batch_first=True, enforce_sorted=False
        packed_embedded = nn.utils.rnn.pack_padded_sequence(embedded, length, batch_first=True, enforce_sorted=False) # your code here
        #  packed_output, (________ , _________) = self.lstm(packed_embedded) <- Fill in this code cell
        packed_output, (hidden, cell) = self.lstm(packed_embedded)


        # hidden = [n layers * n directions, batch size, hidden dim]
        # cell = [n layers * n directions, batch size, hidden dim]
        output, output_length = nn.utils.rnn.pad_packed_sequence(packed_output)
        # output = [batch size, seq len, hidden dim * n directions]


        # Q5: Fill this code snippet correctly
        if self.lstm.bidirectional:
            # Concatenate hidden[-1], hidden[-2] along dim -1 (make sure to use dropout as well)
            hidden = self.dropout(torch.cat((hidden[-2,:,:], hidden[-1,:,:]), dim = 1))# your code here
        else:
            # Use hidden[-1] (make sure to use dropout as well)
            hidden = self.dropout(hidden[-1,:,:]) # your code here
        prediction = self.fc(hidden)
        # prediction = [batch size, output dim]
        return prediction